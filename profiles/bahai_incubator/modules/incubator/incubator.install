<?php
// $Id$

/**
 * @file
 *
 * This is the base install for the incubator.  It creates vocabularies for tags,
 * localities, activity_type (core activities), and activity_group (seo-friendly
 * age groups, etc.).
 *
 * It also includes several helper functions to be used by all other incubator
 * submodules.
 *
 */

/**
 * Implements hook_install().
 *
 * The core functionality provided by the Incubator module on install includes:
 * <ul>
 * <li>a Basic Page content type</li>
 * <li>field_main_image based on the image module</li>
 * <li>roles for Administrator and Editor</li>
 * <li>taxonomy vocabularies for activity type, activity group, locality, and tags</li>
 * </ul>
 */
function incubator_install() {
  $t = get_t(); // this code may be run during installation time

  // CREATE Tags VOCABULARY
  if (!$vocabulary = taxonomy_vocabulary_machine_name_load('tags')) {
    $description = $t('Use tags to group articles on similar topics into categories.');
    $help = $t('Enter a comma-separated list of words to describe your content.');
    $vocabulary = (object) array(
      'name' => $t('Tags'),
      'description' => $description,
      'machine_name' => 'tags',
      'help' => $help,
    );
    taxonomy_vocabulary_save($vocabulary);
  }

  // CREATE Basic Page CONTENT TYPE
  $type = array(
    'type' => 'page',
    'name' => $t('Basic page', array(), array('#context' => 'Node type name')),
    'description' => $t("Use a <em>Basic page</em> for your static content, such as an 'About us' page."),
  );
  $pathauto_prefix = $t('content/', array(), array('#context' => 'Web search friendly URL path - no special characters'));
  if (_incubator_create_nodetype($type, $pathauto_prefix, 2, FALSE)) {
    // create field_main_image
    // attach field_main_image to Basic Page
    _incubator_attach_field('field_main_image', 'page');

    // create field_tags
    // attach field_tags to Basic Page
    _incubator_attach_field('field_tags', 'page');
  }

  // TODO: set locations for users
  $settings = array(
    'multiple' => array('min' => 0, 'max' => 1, 'add' => 1),
    'form' => array('weight' => 50, 'collapsible' => 1, 'collapsed' => 0, 'fields' => array(
      'additional' => array(
        'collect' => '0',
        'default' => '',
        'weight' => '6',
      ),
      'postal_code' => array(
        'collect' => '0',
        'default' => '',
        'weight' => '12',
      ),
      'locpick' => array(
        'collect' => '0',
        'weight' => '20',
      ),
    )),
    'display' => array('teaser' => 0, 'user' => 0)
  );
  _incubator_set_location('user', $settings, 'user');

  // Set realname for users
  _incubator_attach_field('field_realname', 'user', 'user');
  variable_set('realname_pattern', '[user:field_realname]');

  // Set media rendered file formatters
  _incubator_reset_video_file_displays();
  variable_set('field_bundle_settings_file__video', _incubator_file_bundle_settings());

}

/**
 * Helper function that creates a field and then attaches it to an entity bundle.
 *
 * @param string $field
 * The name of the field to initialize
 *
 * @param string $bundle
 * The name of the bundle to which to attach the field instance
 *
 * @param string $entity_type
 * The name of the entity type to which to attach the field instance
 *
 * @return <type>
 */
function _incubator_attach_field($field, $bundle = NULL, $entity_type = 'node') {
  $t = get_t();
  module_load_include('inc', 'incubator', 'incubator.fields');
  if (!function_exists($function = '_incubator_fields_' . $field)) {
    return FALSE;
  }
  if (!$field_def = field_info_field($field)) {   // intentional assignment of $field
    if (!$field_def = call_user_func_array($function, array('field'))) {
      return FALSE;
    }
    $field_def['field_name'] = $field;
    $field_def = field_create_field($field_def);
    if (is_array($field_def)) {
      drupal_set_message($t('Created field %field', array('%field' => $field)));
    }
  }
  if (!is_array($field_def)) {
    return FALSE;
  }
  if (is_null($bundle)) {
    return $field_def;
  }
  if (!empty($field_def['bundles']) && !empty($field_def['bundles'][$entity_type]) && in_array($bundle, $field_def['bundles'][$entity_type])) {
    return $field_def;
  }
  $instance = call_user_func_array($function, array('instance'));
  $instance['entity_type'] = $entity_type;
  $instance['bundle'] = $bundle;
  $instance['field_name'] = $field;
  $instance = field_create_instance($instance);
  if (is_array($instance)) {
    drupal_set_message($t('Added field %field to %bundle', array('%field' => $field, '%bundle' => $bundle)));
    return $instance;
  }
  return is_array($instance) ? $instance : FALSE;
}

/**
 *
 * @param string $rolename
 * The name of the role to be created
 *
 * @param string $content_type
 * The name of the content type for which to add basic permissions.
 *
 * @return stdClass
 * The role object created (or loaded)
 */
function _incubator_create_role($rolename, $content_type) {
  if (!$role = user_role_load_by_name($rolename)) {
    $role = new stdClass();
    $role->name = $rolename;
    user_role_save($role);
    $role = user_role_load_by_name($rolename);
  }
  $permissions = array(
    "create $content_type content",
    "edit own $content_type content",
    "delete own $content_type content"
  );
  user_role_grant_permissions($role->rid, $permissions);
  return $role;
}

/**
 * Helper function for creating a content type for the Incubator.  Creates the
 * node type reqested, unless it already exists.
 *
 * @param array $type_array
 * An array with at least the keys 'type', 'name', and 'description'
 *
 * @param string $pathauto_prefix
 * The English-language prefix that will be followed by [node:title].  Defaults
 * to 'content/', but any other string should be translated as per the following example:<pre>
 * $pathauto_prefix = $t('[your prefix]/', array(), array('#context' => 'Web search friendly URL - no special characters'));</pre>
 *
 * @param int $comments
 * One of the comment statuses, as an integer, for whether or not comments
 * should be enabled by default for this nodetype - IF the comment module is on.
 * <ul><li>0 = Comments are hidden</li>
 * <li>1 = Comments are displayed but closed</li>
 * <li>2 = Comments are open (default)</li></ul>
 * DO NOT USE the comment module constants, as that module is not enabled by default.
 *
 * @param boolean $submitted
 * Whether or not to show the submission information for the node type.  Defaults
 * to TRUE.
 * 
 */
function _incubator_create_nodetype($type_array, $pathauto_prefix = 'content/', $comments = 2, $submitted = TRUE, $options = array('status', 'revision', 'moderation')) {
  $t = get_t();
  $type_array = (array) $type_array;
  // create Basic Page content type
  if (!node_type_get_type($type_array['type'])) {
    $type = $type_array + array(
      'base' => 'node_content',
      'custom' => 1,
      'modified' => 1,
      'locked' => 0,
    );
    $type = node_type_set_defaults($type);
    if (node_type_save($type) == SAVED_NEW) {
      drupal_set_message(t('Created new node type %type', array('%type' => $type->type)));
      $instance = node_add_body_field($type);
      // Set the body field display
      $instance['display']['teaser']['type'] = 'media_summary_or_trimmed';
      $instance['display']['search_result'] = $instance['display']['teaser'];
      field_update_instance($instance);
      $field_bundle_settings = field_bundle_settings('node', $type->type);
      $field_bundle_settings['view_modes']['search_result']['custom_settings'] = 1;
      field_bundle_settings('node', $type->type, $field_bundle_settings);
      // Set defaults for published, promoted, revisions, etc.
      variable_set("node_options_$type->type", $options);
      // Set default for comment display
      variable_set("comment_$type->type", $comments);
      // Set default for display of submitted information.
      variable_set("node_submitted_$type->type", $submitted);

      // set pathauto definition
      if (!is_null($pathauto_prefix)) {
        $pathauto_prefix = $pathauto_prefix == 'content/' ? $t('content/', array(), array('#context' => 'Web search friendly URL - no special characters')) : $pathauto_prefix;
        $pathauto_prefix = trim($pathauto_prefix, '/ ') . '/';
        variable_set("pathauto_node_{$type->type}_pattern", $pathauto_prefix . '[node:title]');
      }
      _incubator_nodeformcols($type->type);
      _incubator_set_location($type->type);
      return TRUE;
    }
  }
  $t = get_t();
  drupal_set_message($t('Failed to create new node type %type', array('%type' => $type_array['type'])), 'warning');
  return FALSE;
}

/**
 * Removes a node type if there are no nodes of that type.
 *
 * @param string $type
 * The machine name of the nodetype to be removed.
 */
function _incubator_delete_nodetype($type) {
  if (!db_query("SELECT nid FROM {node} n WHERE type = :type", array(':type' => $type))->fetchfield()) {
    node_type_delete($type);
    drupal_set_message(t('The %type content type has been removed.', array('%type' => $type)));
    return TRUE;
  }
  else {
    drupal_set_message(t('The %type content type could not be removed, as some %type content still exists.', array('%type' => $type)));
    return FALSE;
  }
}

/**
 *
 * @param string $type
 * The node type for which to save the nodeformcols variable.
 */
function _incubator_nodeformcols($type) {
  $settings = array(
    // main region
    'title' => array(
      'region' => 'main',
      'weight' => '-50',
      'has_required' => TRUE,
      'title' => 'Title',
    ),
    'field_media' => array(
      'region' => 'main',
      'weight' => '-20',
      'has_required' => TRUE,
      'title' => 'Media',
    ),
    'body' => array(
      'region' => 'main',
      'weight' => '-1',
      'has_required' => FALSE,
      'title' => 'Body',
      'hidden' => 0,
    ),
    'field_tags' => array(
      'region' => 'main',
      'weight' => '10',
      'has_required' => FALSE,
      'title' => 'Tags',
      'hidden' => 0,
    ),
    'private' => array(
      'region' => 'main',
      'weight' => '49',
      'has_required' => FALSE,
      'title' => 'Make this content private',
      'hidden' => 0,
    ),
    'actions' => array(
      'region' => 'main',
      'weight' => '50',
      'has_required' => FALSE,
      'title' => 'Save',
      'hidden' => 0,
    ),
    // footer region
    'additional_settings' => array(
      'region' => 'footer',
      'weight' => '1',
      'has_required' => FALSE,
      'title' => 'Vertical tabs',
      'hidden' => 0,
    ),
    // right region
    'field_main_image' => array(
      'region' => 'right',
      'weight' => '-20',
      'has_required' => FALSE,
      'title' => 'Main Image',
      'hidden' => 0,
    ),
    'field_localities' => array(
      'region' => 'right',
      'weight' => '-19',
      'has_required' => FALSE,
      'title' => 'Localities',
      'hidden' => 0,
    ),
    'field_activity_type' => array(
      'region' => 'right',
      'weight' => '-10',
      'has_required' => FALSE,
      'title' => 'Activity Type',
      'hidden' => 0,
    ),
    'field_activity_group' => array(
      'region' => 'right',
      'weight' => '-9',
      'has_required' => FALSE,
      'title' => 'Activity Group',
      'hidden' => 0,
    ),
    // occasional fields
    'field_expires_date' => array(
      'region' => 'right',
      'weight' => '-20',
      'has_required' => TRUE,
      'title' => 'Expires',
      'hidden' => 0,
    ),
    'field_event_info' => array(
      'region' => 'main',
      'weight' => '-20',
      'has_required' => TRUE,
      'title' => 'Event info',
      'hidden' => 0,
    ),
    'field_event_date' => array(
      'region' => 'main',
      'weight' => '-5',
      'has_required' => TRUE,
      'title' => 'Event date',
      'hidden' => 0,
    ),
    'field_gallery_images' => array(
      'region' => 'main',
      'weight' => '-3',
      'has_required' => TRUE,
      'title' => 'Gallery Photos',
      'hidden' => 0,
    )
  );
  variable_set("nodeformscols_field_placements_{$type}_default", $settings);
}

function _incubator_set_location($type, $loc = array(), $entity_type = 'node') {
  $defaults = array(
    'multiple' => array(
      'min' => '0',
      'max' => '0',
      'add' => '0',
    ),
    'form' => array(
      'weight' => '10',
      'collapsible' => 0,
      'collapsed' => 0,
      'fields' => array(
        'name' => array(
          'collect' => '1',
          'default' => '',
          'weight' => '2',
        ),
        'street' => array(
          'collect' => '1',
          'default' => '',
          'weight' => '4',
        ),
        'additional' => array(
          'collect' => '1',
          'default' => '',
          'weight' => '6',
        ),
        'city' => array(
          'collect' => '2',
          'default' => '',
          'weight' => '8',
        ),
        'province' => array(
          'collect' => '2',
          'default' => '',
          'weight' => '10',
        ),
        'postal_code' => array(
          'collect' => '1',
          'default' => '',
          'weight' => '12',
        ),
        'country' => array(
          'collect' => '1',
          'default' => variable_get('site_defalt_country', 'us'),
          'weight' => '14',
        ),
        'locpick' => array(
          'collect' => '1',
          'weight' => '20',
        ),
      ),
    ),
    'display' => array(
      'weight' => '0',
      'hide' => array(
        'postal_code' => 'postal_code',
        'country' => 'country',
        'locpick' => 'locpick',
        'province_name' => 'province_name',
        'country_name' => 'country_name',
        'map_link' => 'map_link',
        'coords' => 'coords',
        'name' => 0,
        'street' => 0,
        'additional' => 0,
        'city' => 0,
        'province' => 0,
      ),
      'teaser' => 0,
      'full' => 1,
    ),
    'rss' => array(
      'mode' => 'simple',
    ),
  );
  $settings = array();
  foreach (array('multiple', 'form', 'display', 'rss') as $key) {
    $settings[$key] = !empty($loc[$key]) ? $loc[$key] + $defaults[$key] : $defaults[$key];
  }
  $settings['form']['fields'] = !empty($loc['form']['fields']) ? $loc['form']['fields'] + $defaults['form']['fields'] : $defaults['form']['fields'];
  $settings['display']['hide'] = !empty($loc['display']['hide']) ? $loc['display']['hide'] + $defaults['display']['hide'] : $defaults['display']['hide'];
  if ($entity_type != 'user') {
    variable_set("location_settings_{$entity_type}_$type", $settings);
    variable_set("location_defaultnum_$type", $settings['multiple']['min']);
    variable_set("location_maxnum_$type", $settings['multiple']['max']);
  }
  else {
    variable_set("location_settings_user", $settings);
  }
}

function _incubator_taxonomy_terms($vocabulary) {
  $t = get_t();
  // activity_type taxonomy moved to incubator_core_activities.install
  if ($vocabulary == 'activity_group') {
    return array(
      $t('Activities for kids', array(), array('#context' => 'SEO-friendly groups for activities')),
      $t('Youth activities', array(), array('#context' => 'SEO-friendly groups for activities')),
      $t('After school activities', array(), array('#context' => 'SEO-friendly groups for activities')),
      $t('Family activities', array(), array('#context' => 'SEO-friendly groups for activities')),
    );
  }
}

function incubator_incubator_default_blocks() {
  return array(
    'promoted:titles' => array(
      'module' => 'views',
      'delta' => 'recent_stories-block_titles',
      'visibility' => 1,
      'pages' => '<front>',
      'status' => 0,
      'weight' => 1,
    ),
    'promoted:slides' => array(
      'module' => 'views',
      'delta' => 'recent_stories-block_slides',
      'visibility' => 1,
      'pages' => '<front>',
      'status' => 0,
      'weight' => 1,
    ),
    'promoted:titles' => array(
      'module' => 'views',
      'delta' => 'recent_stories-block_bigslides',
      'visibility' => 1,
      'pages' => '<front>',
      'status' => 0,
      'weight' => 1,
    ),
    'incubator:copyright' => array(
      'module' => 'incubator',
      'delta' => 'copyright',
      'region' => 'footer',
      'status' => 0,
      'weight' => 50,
    ),
    'system:help' => array(
      'module' => 'system',
      'delta' => 'help',
      'region' => 'content',
      'status' => 1,
      'weight' => -99,
    ),
  );
}

/**
 *
 * @param array $blocks
 * The array of blocks to enable, keyed by a string key.
 * Each block should be an array consisting of the following keys:
 * <ul><li>module (required)</li>
 * <li>delta (required)</li>
 * <li>theme</li>
 * <li>status</li>
 * <li>weight</li>
 * <li>region</li>
 * <li>pages</li>
 * <li>cache</li></ul>
 * @param string $theme
 * The theme for which to enable all blocks; the default theme will be assumed
 * if no theme is specified.
 * @return boolean
 * False if no $blocks are enabled.
 */
function _incubator_enable_blocks($blocks, $theme = NULL) {
  if (!is_array($blocks)) { return FALSE; }
  $success = TRUE;
  $insertquery = db_insert('block')->fields(array('module', 'delta', 'theme', 'status', 'weight', 'region', 'visibility', 'pages', 'title', 'cache'));
  if (is_null($theme)) {
    $theme = variable_get('theme_default', 'incubator_standard_theme');
  }
  $region = variable_get('incubator_sidebar', 'sidebar_second');
  foreach ($blocks as $id => $settings) {
    if (!is_array($settings)) { continue; }
    $function = $settings['module'] . '_block_info';
    if (function_exists($function)) {
      $block_info = $function();
      if (!empty($block_info[$settings['delta']])) {
        $block_settings = array_intersect_key($block_info[$settings['delta']], array('visibility' => 1, 'pages' => 1));
        $settings += $block_settings;
      }
    }
    $settings = $settings + array(
      'theme' => $theme,
      'status' => 1,
      'weight' => 0,
      'region' => $region,
      'visibility' => 0,
      'pages' => '',
      'title' => '',
      'cache' => -1,
    );
    if (db_query("SELECT COUNT(*) FROM {block} WHERE module = ? AND delta = ? AND theme = ?", array($settings['module'], $settings['delta'], $settings['theme']))->fetchField()) {
      $updatequery = db_update('block');
      foreach (array('theme', 'module', 'delta') as $field) {
        $updatequery->condition($field, $settings[$field]);
        unset($settings[$field]);
      }
      $success = $updatequery->fields($settings)->execute() && $success;
    }
    else {
      $insertquery->values($settings);
    }
  }
  $success = $insertquery->execute() && $success;
  if ($success) {
    drupal_set_message("Updated block configurations");
  }
  return FALSE;
}

function _incubator_file_bundle_settings() {
  return array(
    'view_modes' => array(),
    'extra_fields' => array(
      'form' => array(),
      'display' => array(
        'file' => array(
          'media_small' => array(
            'weight' => '0',
            'visible' => TRUE
          )
        )
      )
    )
  );
}

function _incubator_reset_video_file_displays() {
  module_load_include('inc', 'incubator', 'incubator.admin');
  foreach(array('vimeo', 'youtube') as $provider) {
    foreach(array('small', 'large') as $size) {
      if ($settings = _incubator_file_display_video_default($provider, $size)) {

        $formatter = array(
          'name' => "video__media_{$size}__media_{$provider}_video",
          'weight' => -10, 'status' => 1, 'settings' => $settings,
        );
        _incubator_file_display_save($formatter);

        $formatter = array(
          'name' => "video__media_{$size}__media_{$provider}_image",
          'weight' => ($size == 'large' ? -5 : -15), 'status' => 1, 'settings' => array('image_style' => ($size == 'small') ? 'thumbnail' : $size),
        );
        _incubator_file_display_save($formatter);

      }
    }
    $formatter = array(
      'name' => "video__media_link__media_{$provider}_image",
      'weight' => -15, 'status' => 1, 'settings' => array('image_style' => 'slideshow'),
    );
    _incubator_file_display_save($formatter);
  }
}

function _incubator_file_display_save($display) {
  $display['settings'] = serialize($display['settings']);
  if (db_query('SELECT name FROM {file_display} WHERE name = ?', array($display['name']))->fetchfield()) {
    db_update('file_display')->fields($display)->condition('name', $display['name'])->execute();
  }
  else {
    db_insert('file_display')->fields($display)->execute();
  }
}

/**
 * Update field displays, esp. to account for media
 */
function incubator_update_7101() {
  cache_clear_all();
  $types = node_type_get_types();
  foreach (array_keys($types) as $type) {

    // Add search_result view mode
    $field_bundle_settings = field_bundle_settings('node', $type);
    $field_bundle_settings['view_modes']['search_result']['custom_settings'] = 1;
    field_bundle_settings('node', $type, $field_bundle_settings);
    drupal_set_message(t('Added custom search result display to content type %type'), array('%type' => $type));

    // Update body field display handler
    if ($instance = field_info_instance('node', 'body', $type)) {
      $instance['display']['teaser']['type'] = 'media_summary_or_trimmed';
      $instance['display']['search_result'] = $instance['display']['teaser'];
      field_update_instance($instance);
      drupal_set_message(t('Incubator updated body field display for content type %type', array('%type' => $type)));
    }

    // Update field_main_image display weight
    if ($instance = field_info_instance('node', 'field_main_image', $type)) {
      $instance['display']['default']['weight'] = -50;
      $instance['display']['teaser']['weight'] = -50;
      $instance['display']['search_result'] = $instance['display']['teaser'];
      field_update_instance($instance);
      drupal_set_message(t('Incubator main image display weight for content type %type', array('%type' => $type)));
    }

    // Update field_event_info display weight
    if ($instance = field_info_instance('node', 'field_event_info', $type)) {
      $instance['display']['search_result'] = $instance['display']['teaser'];
      field_update_instance($instance);
      drupal_set_message(t('Incubator updated event info display weight for content type %type', array('%type' => $type)));
    }

  }
}

/**
 * Reset the node form for events
 */
function incubator_update_7102() {
  _incubator_nodeformcols('event');
}

/**
 * Remove localities fields if they are not needed
 */
function incubator_update_7103() {
  if (!module_exists('incubator_localities')) {
    $voc = taxonomy_vocabulary_machine_name_load('localities');
    if (!$voc || !db_query("SELECT tid FROM {taxonomy_term_data} WHERE vid = :vid", array(':vid' => $voc->vid))->fetchfield()) {
      field_delete_field('field_localities');
      taxonomy_vocabulary_delete($voc->vid);
    }
  }
}

/**
 * Set media rendered file formatters
 */
function incubator_update_7104() {
  _incubator_reset_video_file_displays();
  variable_set('field_bundle_settings_file__video', _incubator_file_bundle_settings());
  // flush image styles for thumbnail, medium, large
  image_style_flush(image_style_load('thumbnail'));
  image_style_flush(image_style_load('medium'));
  image_style_flush(image_style_load('large'));
}

/**
 * Add administer incubator permission to administrators
 */
function incubator_update_7105() {
  $administrator = user_role_load_by_name('administrator');
  $superadmin = user_role_load_by_name('superadmin');
  $superadmin_rid = variable_get('user_admin_role', $superadmin->rid);
  user_role_grant_permissions($administrator->rid, array('administer incubator'));
  user_role_grant_permissions($superadmin_rid, array('administer incubator'));
  menu_rebuild();
}

/**
 * Clear the object cache for the recent_stories view, and reset video formatters
 */
function incubator_update_7106() {
  cache_clear_all('ctools_export:views_view:upcoming_events', 'cache_views');
  _incubator_reset_video_file_displays();
}

/**
 * Set defaults for new front page blocks
 */
function incubator_update_7107() {
  _incubator_enable_blocks(incubator_incubator_default_blocks());
}

/**
 * Set defaults for promoted nodetypes
 */
function incubator_update_7108() {
  foreach (node_type_get_types() as $name => $type) {
    if (!in_array($name, array('news', 'gallery', 'video', 'announcement'))) {
      variable_set("node_options_$name", array('status', 'revision'));
    }
    elseif ($name == 'announcement') {
      variable_set('node_options_announcement', array('status', 'revision', 'promote', 'sticky'));
    }
  }
}

/**
 * Fix colorbox path and settings
 */
function incubator_update_7109() {
  variable_set('colorbox_path', 'profiles/bahai_incubator/libraries');
  variable_set('colorbox_style', 'profiles/bahai_incubator/modules/incubator/files/colorbox1');
}
