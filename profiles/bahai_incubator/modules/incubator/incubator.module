<?php
// $Id$

/**
 * @file
 *
 */

define('INCUBATOR_IMAGES_THUMBNAIL_SIZE', '212');
define('INCUBATOR_IMAGES_MEDIUM_SIZE', '360');
define('INCUBATOR_IMAGES_LARGE_SIZE', '600');

/**
 * Implements hook_menu().
 */
function incubator_menu() {
  $items = array();
  $items['admin/config/incubator'] = array(
    'title' => 'Basic settings',
    'description' => 'Basic settings for site functionality.',
    'position' => 'left',
    'weight' => -98,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  $items['admin/config/incubator/frontpage'] = array(
    'title' => 'Front page',
    'description' => 'Settings for the front page of the site',
    'access arguments' => array('administer incubator'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('incubator_frontpage_settings'),
    'file' => 'incubator.admin.inc',
    'weight' => -9,
  );
  $items['admin/config/incubator/images'] = array(
    'title' => 'Images',
    'description' => "Settings for all images across the site.",
    'access arguments' => array('administer incubator'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('incubator_image_settings'),
    'file' => 'incubator.admin.inc',
    'weight' => -9,
  );
  foreach (module_implements('incubator_settings') as $module) {
    $modulename = str_replace('incubator_', '', $module);
    $items["admin/config/incubator/$modulename"] = array(
      'title' => ucfirst(str_replace('_', ' ', $modulename)),
      'access arguments' => array('administer incubator'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array("{$module}_incubator_settings"),
      'file' => "$module.admin.inc",
      'file path' => drupal_get_path('module', $module),
    );
    if (function_exists("{$module}_incubator_settings_menu")) {
      $items["admin/config/incubator/$modulename"] = array_merge($items["admin/config/incubator/$modulename"], call_user_func("{$module}_incubator_settings_menu"));
    }
  }
  $items['admin/config/incubator-features'] = array(
    'title' => '============',
    'title callback' => FALSE,
    'description' => 'Enable or disable site features',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('incubator_feature_settings'),
    'file' => 'incubator.admin.inc',
    'access arguments' => array('administer incubator'),
  );
  $items['admin/reports/incubator'] = array(
    'title' => 'Content',
    'description' => 'Report on content creation and contributors.',
    'access arguments' => array('access site reports'),
    'page callback' => 'incubator_report',
    'file' => 'incubator.reports.inc',
    'weight' => '-5',
  );
  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function incubator_menu_alter(&$items) {
  $base_item = array('access arguments' => array('administer incubator'), 'access callback' => 'user_access', 'weight' => 0,);
  foreach (array(
    'admin/config/incubator/site-information' => 'admin/config/system/site-information',
    'admin/config/incubator/regional' => 'admin/config/regional/settings',
  ) as $incubator => $standard) {
    if (!empty($items[$standard])) {
      $items[$incubator] = array_merge($items[$standard], $base_item);
    }
  }
  $items['admin/config/incubator/site-information']['weight'] = -50;
  if (!empty($items['admin/content/media'])) {
    $items['admin/content/media']['access arguments'] = array('edit media');
  }
  $items['admin/modules']['access arguments'] = array('administer incubator');
  $items['admin/modules']['page arguments'] = array('incubator_feature_settings');
  $items['admin/modules']['file'] = 'incubator.admin.inc';
  $items['admin/modules']['file path'] = drupal_get_path('module', 'incubator');
  $items['admin/modules/advanced/confirm'] = $items['admin/modules/list/confirm'];
  $items['admin/modules/uninstall']['file path'] = drupal_get_path('module', 'system');
  $items['admin/modules/uninstall/confirm']['file path'] = drupal_get_path('module', 'system');
  unset($items['admin/modules/list/confirm']);
  $items['admin/modules/advanced'] = array(
    'title' => 'Advanced',
    'page arguments' => array('system_modules'),
    'access arguments' => array('administer modules'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
    'weight' => 2,
  );
  foreach ($items as $path => $item) {
    if (stripos($path, 'admin/config/incubator/') !== FALSE) {
      $newpath = str_replace('admin/config/incubator/', 'admin/config/', $path) . '-settings';
      $items[$newpath] = $item;
      $items[$newpath]['title callback'] = 'incubator_menu_title';
    }
  }
}

function incubator_menu_title($title, $args = array()) {
  return '- ' . t($title, $args);
}

/**
 * Implements hook_hook_info()
 */
function incubator_hook_info() {
  return array(
    'incubator_settings' => array(
      'group' => 'admin',
    ),
  );
}

/**
 * Implements hook_modules_enabled().
 */
function incubator_modules_enabled($modules) {
  module_load_install('incubator');
  foreach ($modules as $module) {
    if (function_exists($function = "{$module}_incubator_default_blocks")) {
      _incubator_enable_blocks($function());
    }
  }
}

/**
 * Implements hook_modules_disabled().
 */
function incubator_modules_disabled($modules) {
  if (in_array('incubator_private', $modules)) {
    module_disable(array('private'));
  }
}

/**
 * Implements hook_permission().
 */
function incubator_permission() {
  return array(
    'administer incubator' => array(
      'title' => t('Administer incubator'),
    ),
  );
}

// PREPROCESS HTML - mainly for body classes
/**
 * Implements hook_preprocess_HOOK() for html
 */
function incubator_preprocess_html(&$variables) {
  $variables['classes_array'][] = 'incubator-images-' . variable_get('incubator_images', 'right');
  // Fixes contextual links everywhere - see http://drupal.org/node/1493210
  if (!empty($variables['page']['#views_contextual_links_info'])) {
    $variables['classes_array'] = array_diff($variables['classes_array'], array('contextual-links-region'));
  }
  if (module_exists('transliteration')) {
    $transliterate = module_exists('variable') ? variable_get_value('incubator_transliterate_page_title', array('default' => TRUE)) : variable_get('incubator_transliterate_page_title', TRUE);
    if ($transliterate) {
      $variables['head_title'] = transliteration_get($variables['head_title'], '?');
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for page
 * TODO: move this to activities module once that is split out
 */
function incubator_preprocess_page(&$vars) {
  if (!empty($vars['page']['content']['system_main']['term_heading'])
          && $vars['page']['content']['system_main']['term_heading']['term']['#term']->vocabulary_machine_name == 'activity_group') {
    drupal_add_js(array('incubatorTaxonomyNoLinkTid' => $vars['page']['content']['system_main']['term_heading']['term']['#term']->tid), 'setting');
  }
  // Fixes contextual links everywhere - see http://drupal.org/node/1493210
  if (!empty($vars['page']['#views_contextual_links_info'])) {
    $vars['classes_array'] = array_diff($vars['classes_array'], array('contextual-links-region'));
  }
}

/**
 * Implements hook_block_info().
 */
function incubator_block_info() {
  return array(
    'copyright' => array(
      'info' => t('Copyright'),
      'cache' => DRUPAL_CACHE_GLOBAL,
      'status' => 0,
      'weight' => 100,
    ),
  );
}

/**
 * Implements hook_block_view().
 */
function incubator_block_view($delta = '') {
  if ($delta == 'copyright') {
    if (module_exists('variable')) {
      $text = variable_get_value('incubator_copyright_text', '');
    }
    else {
      $text = variable_get('incubator_copyright_text', '');
    }
    return array(
      'subject' => NULL,
      'content' => t('&copy; !year @text', array('!year' => date('Y'), '@text' => $text)),
    );
  }
}

/**
 * Implements hook_block_configure().
 */
function incubator_block_configure($delta = '') {
  $form = array();
  if ($delta == 'copyright') {
    $form['incubator_copyright_text'] = array(
      '#type' => 'textfield',
      '#title' => t('Copyright text'),
      '#description' => t('This text will appear after "&copy; !year" on your copyright notice.', array('!year' => date('Y'))),
      '#default_value' => variable_get('incubator_copyright_text', ''),
    );
  }
  return $form;
}

/**
 * Implements hook_block_save().
 */
function incubator_block_save($delta = '', $edit = array()) {
  if ($delta == 'copyright') {
    variable_set('incubator_copyright_text', $edit['incubator_copyright_text']);
  }
}

// STRIP MEDIA FROM TEASERS
// TODO: look into a more general solution as per Dave Reid's recommendations
// @see http://drupal.org/node/1113088
/**
 * Implements hook_field_formatter_info().
 */
function incubator_field_formatter_info() {
  return array(
    'media_trimmed' => array(
      'label' => t('Trimmed text without media'),
      'field types' => array('text', 'text_long', 'text_with_summary'),
      'settings' => array('trim_length' => 600),
    ),
    'media_summary_or_trimmed' => array(
      'label' => t('Summary or trimmed text without media'),
      'field types' => array('text', 'text_long', 'text_with_summary'),
      'settings' => array('trim_length' => 600),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function incubator_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $element = array();

  if (strpos($display['type'], '_trimmed') !== FALSE) {
    $element['trim_length'] = array(
      '#title' => t('Trim length'),
      '#type' => 'textfield',
      '#size' => 10,
      '#default_value' => $settings['trim_length'],
      '#element_validate' => array('element_validate_integer_positive'),
      '#required' => TRUE,
    );
  }

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function incubator_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = '';

  if (strpos($display['type'], '_trimmed') !== FALSE) {
    $summary = t('Trim length') . ': ' . $settings['trim_length'];
  }

  return $summary;
}

/**
 * Implement hook_field_formatter_view().
 */
function incubator_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  if (strpos($display['type'], '_trimmed') !== FALSE) {
    foreach ($items as $delta => $item) {
      if (strpos($item['value'], '[[{"type":"media"') !== FALSE) {
        $pattern = '|\[\[{"type":"media"[^\]\]]+\]\]|';
        $items[$delta]['value'] = preg_replace($pattern, '', $item['value']);
        if (!empty($items[$delta]['summary'])) {
          $items[$delta]['summary'] = preg_replace($pattern, '', $item['summary']);
        }
        unset($items[$delta]['safe_value']);
        unset($items[$delta]['safe_summary']);
      }
    }
    $text_display = $display;
    $text_display['type'] = str_replace('media', 'text', $display['type']);
    return text_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $text_display);
  }
}


function incubator_image_default_styles() {
  $styles = array();
  $styles['incubator_icon'] = array(
    'effects' => array(
      array(
        'name' => 'image_scale_and_crop',
        'data' => array(
          'width' => '56',
          'height' => '42',
        ),
        'weight' => 0,
      ),
    ),
  );
  $slidewidth = variable_get('incubator_images_large_size', constant('INCUBATOR_IMAGES_LARGE_SIZE'));
  $slideheight = round($slidewidth * (7/12));
  $styles['slideshow'] = array(
    'effects' => array(
      array(
        'name' => 'image_scale',
        'data' => array(
          'width' => (string) $slidewidth,
          'height' => '0',
          'upscale' => 1,
        ),
        'weight' => 1,
      ),
      array(
        'name' => 'image_crop',
        'weight' => 2,
        'data' => array(
          'width' => (string) $slidewidth,
          'height' => (string) $slideheight,
          'anchor' => 'center-center',
        ),
      ),
    ),
  );
  return $styles;
}

function incubator_image_styles_alter(&$styles) {
  foreach(array('thumbnail', 'medium', 'large') as $style) {
    if (!empty($styles[$style]) && !empty($styles[$style]['effects'])) {
      foreach ($styles[$style]['effects'] as $i => $effect) {
        if ($effect['name'] = 'image_scale') {
          $setting = variable_get("incubator_images_{$style}_size", constant('INCUBATOR_IMAGES_' . strtoupper($style) . '_SIZE'));
          $styles[$style]['effects'][$i]['data']['height'] = $styles[$style]['effects'][$i]['data']['width'] = $setting;
          continue;
        }
      }
    }
  }
}

function incubator_views_api() {
  return array(
    'api' => 3,
  );
}

/**
 * We do this because for some reason that we can't figure out, the node form
 * columns get lost from time to time.  Hopefully we will be able to delete this
 * at some point.
 */
function incubator_cron() {
  module_load_install('incubator');
  foreach (node_type_get_types() as $type => $nodetype) {
    if (!variable_get("nodeformscols_field_placements_{$type}_default", FALSE)) {
      _incubator_nodeformcols($type);
    }
  }
}

/**
 * This simply puts a notice on the taxonomy term pages helping to explain the
 * nature and purpose of taxonomy and tagging.  We had some site editors who
 * would see the "edit" tab on the term page and try to add events that way.
 */
function incubator_form_taxonomy_form_term_alter(&$form, &$form_state) {
  if (empty($form_state['input']['op']) || $form_state['input']['op'] != t('Delete')) {
    drupal_set_message(t('This is a taxonomy term used to classify
      content; instead of adding specific events or articles to this page, use the
      "Add content" link in the upper right.  For example, instead of editing the
      "devotional gatherings" term page, add an "event" and classify it as a
      devotional gathering.'), 'status', FALSE);
  }
}

function incubator_form_field_ui_field_edit_form_alter(&$form, &$form_state) {
  include_once DRUPAL_ROOT . '/includes/utility.inc';
  $field = $form['#field'];
  $instance = $form['#instance'];
  unset($field['id'], $field['bundles'], $field['columns'], $field['deleted'],
        $field['storage']['details'], $field['entity_types'], $field['module'],
        $field['active'], $field['foreign keys'], $field['indexes'],
        $field['storage']['module'], $field['storage']['active']);
  unset($instance['id'], $instance['field_id'], $instance['entity_type'],
        $instance['bundle'], $instance['deleted']);
  $form['definition'] = array(
    '#type' => 'fieldset',
    '#title' => t('Field definition'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#weight' => 1000,
    'field_definition' => array(
      '#type' => 'markup',
      '#markup' => '<textarea readonly title="Field definition" rows=24 style="width:45%; border:1px solid grey; margin-right:5%;">$field = ' . drupal_var_export($field) . ';</textarea>',
    ),
    'instance_definition' => array(
      '#type' => 'markup',
      '#markup' => '<textarea readonly title="Instance definition" rows=24 style="width:45%; border:1px solid grey;">$instance = ' . drupal_var_export($instance) . ';</textarea>',
    ),
  );
}

/**
 * Implements hook_form_alter() on system_modules_form.
 */
function incubator_form_system_modules_alter(&$form, &$form_state) {
  // Disable core blog module, as it conflicts with the incubator blog module
  if (!empty($form['modules']['Core']['blog'])) {
    $form['modules']['Core']['blog']['enable']['#disabled'] = TRUE;
    $form['modules']['Core']['blog']['description']['#markup'] .= ' ' . t('Please use the Incubator Blog module instead.');
  }
  $form['#action'] = url('admin/modules/advanced/confirm');
}

/**
 * Implements hook_form_alter() on system_site_information_settings form.
 */
function incubator_form_system_site_information_settings_alter(&$form, &$form_state) {
  $form['site_information']['site_name']['#weight'] = -2;
  $form['site_information']['site_slogan']['#weight'] = -2;
  $form['site_information']['incubator_transliterate_page_title'] = array(
    '#type' => 'checkbox',
    '#title' => t('Transliterate page title'),
    '#description' => t('This option removes special characters from the html &lt;title&gt; header, which should help search results for English but might not work for other languages.  Requires the transliteration module.'),
    '#default_value' => variable_get('incubator_transliterate_page_title', TRUE),
    '#weight' => -1,
    '#disabled' => !module_exists('transliteration'),
  );
}

/**
 * Implements hook_form_alter() on colorbox_admin_settings form.
 */
function incubator_form_colorbox_admin_settings_alter(&$form, &$form_state) {
  $form['colorbox_custom_settings']['colorbox_style']['#options']['profiles/bahai_incubator/modules/incubator/files/colorbox1'] = t('Incubator 1');
}

/**
 * Helper function for quickly creating a path redirect; also removes all 
 * redirects from $redirect_path to $source_path (preventing circular redirects)
 * and removes all other redirects from $source_path to anywhere else.
 * 
 * @param string $source_path
 * The path to redirect from, e.g. "events/upcoming/$term->tid".
 * 
 * @param string $redirect_path
 * The path to redirect to, e.g. "taxonomy/term/$term->tid".
 */
function _incubator_redirect($source_path, $redirect_path) {
  if (module_exists('redirect')) {
    if ($rid = db_query('SELECT rid FROM {redirect} WHERE source = ? AND redirect = ?', array($redirect_path, $source_path))->fetchField()) { // intentional assignment of $rid
      db_delete('redirect')->condition('rid', $rid)->execute();
    }
    if ($rid = db_query('SELECT rid FROM {redirect} WHERE source = ?', array($source_path))->fetchField()) { // intentional assignment of $rid
      db_delete('redirect')->condition('rid', $rid)->execute();
    }
    $redirect = (object) array(
      'type' => 'redirect',
      'source' => $source_path,
      'source_options' => array(),
      'redirect' => $redirect_path,
      'redirect_options' => array(),
      'language' => language_default('language'),
      'status_code' => 301,
    );
    redirect_save($redirect);
  }
}


// TODO: set the user location & locality as the default for blogs

// TODO: make an administrative interface for incubator modules

// TODO: make a startup wizard

// TODO: implement image cropping
// TODO: implement theme randomization
// TODO: implement create content block
// TODO: implement private content
// TODO: support location meta tags
