<?php
// $Id$

/**
 * @file
 *
 */

function incubator_core_activities_enable() {
  $t = get_t();
  
  // CREATE Activity Type VOCABULARY
  if (!$vocabulary = taxonomy_vocabulary_machine_name_load('activity_type')) {
    $description = $t('The core activities undertaken by your community.', array(), array('#context' => "Bahá'í core activities taxonomy"));
    $help = $t('Choose one or more activity types if appropriate.', array(), array('#context' => "Bahá'í core activities taxonomy"));
    $vocabulary = (object) array(
      'name' => $t('Activity Type'),
      'description' => $description,
      'machine_name' => 'activity_type',
      'help' => $help,
    );
    taxonomy_vocabulary_save($vocabulary);
    // set pathauto definition
    $prefix = check_url($t('activities/', array(), array('#context' => 'Search-friendly page URL - no special characters')));
    variable_set('pathauto_taxonomy_term_activity_type_pattern', $prefix . '[term:name]');

    // create field_main_image
    // attach field_main_image to Activity Type
    _incubator_attach_field('field_main_image', 'activity_type', 'taxonomy_term');

    $vocabulary = taxonomy_vocabulary_machine_name_load('activity_type');
    foreach(_incubator_core_activities_taxonomy_terms() as $name => $description) {
      $term = (object) array(
        'vid' => $vocabulary->vid,
        'name' => $name,
        'description' => $description,
      );
      taxonomy_term_save($term);
    }

  }

  // Add core activities field to existing content types
  foreach (_incubator_core_activities_content_types() as $bundle) {
    if (node_type_get_name($bundle) && !field_info_instance('node', 'field_activity_type', $bundle)) {
      _incubator_attach_field('field_activity_type', $bundle);
    }
  }

}

function incubator_core_activities_disable() {
  // Remove core activities fields from content types
  // Mark the field instance for deletion.
  db_update('field_config_instance')
    ->fields(array('deleted' => 1))
    ->condition('field_name', 'field_activity_type')
    ->execute();

  // Clear the cache.
  field_cache_clear();
  drupal_set_message("Bahá'í core activities module has been disabled.  To remove all
    related data, you must <a href='admin/modules/uninstall'>uninstall the module</a>.", 'warning');
}

function incubator_core_activities_uninstall() {
  // Remove all field data
  field_delete_field('field_activity_type');
  // Remove core activities taxonomy data entirely
  $voc = taxonomy_vocabulary_machine_name_load('activity_type');
  taxonomy_vocabulary_delete($voc->vid);
}

function _incubator_core_activities_content_types() {
  return array('news', 'blog', 'event', 'gallery');
}

function _incubator_core_activities_taxonomy_terms() {
  $t = get_t();
  return array(
    $t('Devotional gatherings', array(), array('#context' => "Bahá'í core activities taxonomy")) =>
      $t("Community gatherings for prayer and worship take a wide variety of forms around the world and are generally open to all.", array(), array('#context' => "Bahá'í core activities taxonomy")),
    $t("Children's classes", array(), array('#context' => "Bahá'í core activities taxonomy")) =>
      $t("Classes for children, open to all, teach spiritual attitudes and behavior based on Bahá'í principles.", array(), array('#context' => "Bahá'í core activities taxonomy")),
    $t('Junior youth groups', array(), array('#context' => "Bahá'í core activities taxonomy")) =>
      $t("Groups for youth ages 12 to 15 provide an environment of mutual support as young people strive to effect positive change in their communities and their own lives.", array(), array('#context' => "Bahá'í core activities taxonomy")),
    $t('Study circles', array(), array('#context' => "Bahá'í core activities taxonomy")) =>
      $t("Groups of friends who come together to study the Bahá'í teachings and apply them in service to their communities.", array(), array('#context' => "Bahá'í core activities taxonomy")),
  );
}

function incubator_core_activities_incubator_default_blocks() {
  return array(
    'incubator:core' => array(
      'module' => 'views',
      'delta' => 'core_activities-block',
      'weight' => -10,
    ),
    'incubator:core-slideshow' => array(
      'module' => 'views',
      'delta' => 'core_activities-block_bigslides',
      'visibility' => 1,
      'pages' => '<front>',
      'status' => 0,
      'weight' => -10,
    ),
  );
}

function _incubator_fields_field_activity_type($op = 'field') {
  $t = get_t();

  if ($voc = taxonomy_vocabulary_machine_name_load('activity_type')) {

    // FIELD DEFINITION
    if ($op == 'field') {
      $field = array(
        'settings' => array(
          'allowed_values' => array(
            array(
              'vocabulary' => 'activity_type',
              'parent' => '0',
            ),
          ),
        ),
        'storage' => array(
          'type' => 'field_sql_storage',
          'settings' => array(),
        ),
        'indexes' => array(
          'tid' => array(
            'tid',
          ),
        ),
        'type' => 'taxonomy_term_reference',
        'module' => 'taxonomy',
        'active' => '1',
        'locked' => '0',
        'cardinality' => '-1',
      );
      return $field;
    }

    // FIELD INSTANCE DEFINITION
    elseif ($op == 'instance') {
      $instance = array(
        'label' => $t('Activity type'),
        'widget' => array(
          'weight' => '34',
          'type' => 'options_buttons',
          'module' => 'options',
          'active' => 1,
          'settings' => array(),
        ),
        'settings' => array(),
        'display' => array(
          'default' => array(
            'label' => 'above',
            'type' => 'taxonomy_term_reference_link',
            'settings' => array(),
            'module' => 'taxonomy',
            'weight' => 10,
          ),
        ),
        'required' => 0,
        'description' => $t('Choose one or more activity types if appropriate.'),
        'default_value' => NULL,
      );
      return $instance;
    }

  }

  return FALSE;
}

/**
 * Initialize block settings for new slideshow
 */
function incubator_core_activities_update_7001() {
  module_load_install('incubator');
  _incubator_enable_blocks(array_intersect_key(incubator_core_activities_incubator_default_blocks(), array('incubator:core-slideshow' => 1)));
}
