<?php
// $Id$

/**
 * @file
 *
 */

function incubator_gallery_views_api() {
  return array(
    'api' => 3,
  );
}

function incubator_gallery_field_formatter_info() {
  return array(
    'incubator_gallery_teaser' => array(
      'label' => t('Gallery'),
      'field types' => array('image'),
      'settings' => array(
        'large_style' => 'gallery_slide',
        'small_style' => 'gallery_thumb',
        'small_images_count' => '',
        'link' => 'content',
        'colorbox' => FALSE,
        'colorbox_image_style' => '',
        'colorbox_gallery' => 'post',
        'colorbox_gallery_custom' => '',
        'colorbox_caption' => 'auto',
        'colorbox_caption_custom' => '',
      ),
      'description' => t('Display multi-value fields as a static image gallery.'),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function incubator_gallery_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $image_styles = image_style_options(FALSE);
  $element = array();

  $element['large_style'] = array(
    '#title' => t('Style for larger image'),
    '#type' => 'select',
    '#options' => $image_styles,
    '#default_value' => $settings['large_style'],
    '#required' => TRUE,
  );
  $element['small_style'] = array(
    '#title' => t('Style for small images'),
    '#type' => 'select',
    '#options' => $image_styles,
    '#default_value' => $settings['small_style'],
    '#required' => TRUE,
  );
  $element['small_images_count'] = array(
    '#title' => t('Number of small images to display'),
    '#description' => t('Leave empty to display all images'),
    '#type' => 'textfield',
    '#size' => 2,
    '#default_value' => $settings['small_images_count'],
    '#element_validate' => array('element_validate_integer_positive'),
  );
  $element['link'] = array(
    '#title' => t('Link images to'),
    '#type' => 'select',
    '#options' => array(
      0 => t('No link'),
      'content' => t('Content'),
      'image:file' => t('Image file'),
      'image:page' => t('Image page')
    ),
    '#default_value' => $settings['link'],
    '#required' => FALSE,
  );
  if (module_exists('colorbox')) {
    $element['colorbox'] = array(
      '#type' => 'checkbox',
      '#title' => t('Use colorbox for large image'),
      '#default_value' => $settings['colorbox'],
    );
    $addons = colorbox_field_formatter_settings_form($field, $instance, $view_mode, $form, $form_state);
    unset($addons['colorbox_node_style']);
    foreach ($addons as $name => $addon) {
      $addons[$name]['#states']['visible'][':input[name$="[settings_edit_form][settings][colorbox]"]'] = array('checked' => TRUE);
    }
    $element += $addons;
  }

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function incubator_gallery_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = '';

  $summary = t('Style for larger image: @style', array('@style' => $settings['large_style'])) . '<br />';
  $summary .= t('Style for small images: @style', array('@style' => $settings['small_style'])) . '<br />';
  $summary .= t('Number of small images to display: @count', array('@count' => $settings['small_images_count'] > 0 ? $settings['small_images_count'] : t('all'))) . '<br />';
  $summary .= t('Linked to: @link', array('@link' => $settings['link'] ? $settings['link'] : t('Nothing')));
  if ($settings['colorbox'] && module_exists('colorbox')) {
    $summary .= '<br/>' . t('Large image launches colorbox');
  }

  return $summary;
}

/**
 * Implement hook_field_formatter_view().
 */
function incubator_gallery_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  // if there are no images, dont do anything else
  if(empty($items)){
    return $element;
  }
  $settings = $display['settings'];
  $colorbox = module_exists('colorbox');

  // get the unique entity id for later
  $ids = entity_extract_ids($entity_type, $entity);
  $entity_id =  $ids[0];
  
  // get the current image id and display that image first
  $image_id = !empty($_GET['displayimage']) ? $_GET['displayimage'] -1 : 0;
  array_unshift($items, $items[$image_id]);
  $image_id++;

  foreach ($items as $delta => $item){
    
    // don't display the current image in the thumbnail list
    if ($delta == $image_id) { continue; }

    // if there is a max number of images, don't display more than that amount
    if (!empty($settings['small_images_count']) && $delta > $settings['small_images_count']) {
      break;
    }

    /*
     *  prepare images
     */
    // Grab and sanitize image information
    // $renderitems['slides'][$delta]['description'] = $item['description']; // so far no description in d7 image fields
    if (!empty($item['title'])) {
      // Sanitize the title
      if(strpos($item['title'], '<') !== FALSE) {
        $item['title'] = strip_tags($item['title']);
      }
    }
    else {
      $item['title'] = ''; // prevents php notices
    }
    $item['filename'] = '';

    // Check if alt attribute is already set and sanitize it, if not use the filename as alt attribute
    if (isset($item['alt']) && !empty($item['alt'])) {
      if(strpos($item['alt'], '<') !== FALSE) {
        $item['alt'] = strip_tags($item['alt']);
      }
    }
    else {
      $item['alt'] = '';
    }
    if ($delta == 0 && $settings['colorbox'] && $colorbox) {
      $settings['colorbox_node_style'] = $settings['large_style'];
      $img = theme('colorbox_image_formatter', array(
        'item' => $item,
        'display_settings' => $settings,
        'node' => $entity,
        'field' => $field,
        'entity_type' => $entity_type,
        'entity' => $entity,
      ));
      $settings['colorbox_node_style'] = 'hide';
    }
    else {
      $img = theme('image_formatter', array(
          'item' => $item,
          'image_style' => $delta == 0 ? $settings['large_style'] : $settings['small_style'],
        )
      );
    }
    $options = array('html' => TRUE);
    switch ($settings['link']) {
      case 'image:page':
        $options['query']['displayimage'] = $delta;
        $options['fragment'] = 'page-title';
      case 'content':
        $img = l($img, "$entity_type/$entity_id", $options);
        break;
      case 'image:file':
        $img = l($img, $item['uri'], $options);
        break;
      default:
        break;
    }
    if ($settings['colorbox'] && $delta > 0 && $colorbox) {
      $img .= theme('colorbox_image_formatter', array(
        'item' => $item,
        'display_settings' => $settings,
        'node' => $entity,
        'field' => $field,
        'entity_type' => $entity_type,
        'entity' => $entity,
      ));
    }

    $element[$delta] = array('#markup' => $img);

  }
  
  return $element;
}

function incubator_gallery_image_default_styles() {
  $styles = array();
  $styles['gallery_huge'] = array(
    'effects' => array(
      array(
        'name' => 'image_scale',
        'data' => array(
          'width' => '960',
          'height' => '',
          'upscale' => 0,
        ),
        'weight' => 0,
      ),
      array(
        'name' => 'image_scale',
        'data' => array(
          'width' => '',
          'height' => '960',
          'upscale' => 0,
        ),
        'weight' => 1,
      ),
    ),
  );
  $styles['gallery_slide'] = array(
    'effects' => array(
      array(
        'name' => 'image_scale',
        'data' => array(
          'width' => '500',
          'height' => '',
          'upscale' => 0,
        ),
        'weight' => 0,
      ),
      array(
        'name' => 'image_scale',
        'data' => array(
          'width' => '',
          'height' => '450',
          'upscale' => 0,
        ),
        'weight' => 1,
      ),
      array(
        'name' => 'canvasactions_definecanvas',
        'data' => array(
          'RGB' => array('HEX' => '000000'),
          'under' => 1,
          'exact' => array(
            'width' => '600',
            'height' => '500',
            'xpos' => 'center',
            'ypos' => 'center',
          ),
          'relative' => array(),
        ),
        'weight' => 2,
      ),
    ),
  );
  $styles['gallery_thumb'] = array(
    'effects' => array(
      array(
        'name' => 'image_scale_and_crop',
        'data' => array(
          'width' => '81',
          'height' => '81',
        ),
        'weight' => 0,
      ),
    ),
  );
  $styles['gallery_teaser_thumb'] = array(
    'effects' => array(
      array(
        'name' => 'image_scale_and_crop',
        'data' => array(
          'width' => '81',
          'height' => '81',
        ),
        'weight' => 0,
      ),
      array(
        'name' => 'image_crop',
        'data' => array(
          'width' => '25',
          'height' => '81',
          'anchor' => 'right-center',
        ),
        'weight' => 1,
      ),
    ),
  );
  return $styles;
}
