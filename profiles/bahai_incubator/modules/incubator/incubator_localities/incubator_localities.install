<?php
// $Id$

/**
 * @file
 *
 */

function incubator_localities_enable() {
  $t = get_t();

  $word = _incubator_localities_get_word();

  // CREATE Locality VOCABULARY
  if (!$vocabulary = taxonomy_vocabulary_machine_name_load('localities')) {
    $description = $t('The localities, communities, or neighborhoods served by this website.', array(), array('Taxonomy description'));
    include_once drupal_get_path('module', 'incubator_localities') . '/incubator_localities.module';
    $help = $t('Mark every %word to which this content specifically relates.', array('%word' => $word), array('#context' => 'Taxonomy help'));
    $vocabulary = (object) array(
      'name' => $t('Localities'),
      'description' => $description,
      'machine_name' => 'localities',
      'help' => $help,
    );
    taxonomy_vocabulary_save($vocabulary);
    // set pathauto definition
    variable_set('pathauto_taxonomy_term_locality_pattern', 'taxonomy/term/[term:tid]');
  }

  $type = array(
    'type' => 'loc',
    'name' => $word,
    'description' => $t('Use a %word to highlight different areas of your cluster or city.', array('%word' => $word))
  );
  
  // create Locality content type
  $pathauto_prefix = $t('local/', array(), array('#context' => 'Web search friendly URL - no special characters'));
  if (_incubator_create_nodetype($type, $pathauto_prefix, 0, FALSE)) {
    _incubator_attach_field('field_main_image', 'loc');
    _incubator_attach_field('field_localities', 'loc');
    // hide field_localities (it is redundant)
    if ($instance = field_info_instance('node', 'field_localities', 'loc')) {   // intentional assignment of $instance
      $instance['display']['default']['type'] = 'hidden';
      field_update_instance($instance);
    }
    // add location
    _incubator_set_location('loc', array('multiple' => array('min' => 1, 'max' => 1, 'add' => 1), 'form' => array('weight' => -20), 'display' => array('full' => 0)));
    variable_set('location_chooser_node_sources', array_merge(variable_get('location_chooser_node_sources', array()), array('loc')));
  }

  // add localities field to user
  _incubator_attach_field('field_localities', 'user', 'user');

  // Add localities field to existing content types
  foreach (array('blog', 'event', 'facility', 'news', 'gallery') as $bundle) {
    if (node_type_get_name($bundle) && !field_info_instance('node', 'field_localities', $bundle)) {
      _incubator_attach_field('field_localities', $bundle);
    }
  }
  
}

function incubator_localities_disable() {
  module_load_install('incubator');
  _incubator_delete_nodetype('loc');
  // Remove core activities fields from content types
  // Mark the field instance for deletion.
  db_update('field_config_instance')
    ->fields(array('deleted' => 1))
    ->condition('field_name', 'field_localities')
    ->execute();

  // Clear the cache.
  field_cache_clear();
  drupal_set_message("Localities module has been disabled.  To remove all related
    data, you must <a href='admin/modules/uninstall'>uninstall the module</a>.", 'warning');
}

function incubator_localities_uninstall() {
  // Remove all field data
  field_delete_field('field_localities');
  // Remove localities taxonomy data entirely
  $voc = taxonomy_vocabulary_machine_name_load('localities');
  taxonomy_vocabulary_delete($voc->vid);
}

function incubator_localities_incubator_default_blocks() {
  return array(
    'local:recentstories' => array(
      'module' => 'views',
      'delta' => 'local_recent_stories-block',
      'region' => 'content',
      'weight' => 1,
      'visibility' => 1,
      'pages' => 'local/*',
    ),
    'local:news' => array(
      'module' => 'views',
      'delta' => 'localities-block',
      'weight' => -5,
      'visibility' => 1,
      'pages' => "news\nblogs\nlocal/*"
    ),
    'local:events' => array(
      'module' => 'views',
      'delta' => 'localities-block_1',
      'weight' => -5,
      'visibility' => 1,
      'pages' => "events/upcoming\nevents/upcoming/*\nevents/calendar\nevents/calendar/*"
    ),
  );
}

function _incubator_fields_field_localities($op = 'field') {
  $t = get_t();

  if ($voc = taxonomy_vocabulary_machine_name_load('localities')) {             // intentional assignment of $voc

    // FIELD DEFINITION
    if ($op == 'field') {
      $field = array(
        'field_name' => 'field_localities',
        'type' => 'taxonomy_term_reference',
        'module' => 'taxonomy',
        'active' => '1',
        'locked' => '0',
        'cardinality' => '-1',
        'translatable' => '0',
        'settings' => array(
          'allowed_values' => array(
            array(
              'vocabulary' => 'localities',
              'parent' => '0',
            ),
          ),
        ),
        'storage' => array(
          'type' => 'field_sql_storage',
          'settings' => array(),
        ),
        'indexes' => array('tid' => array('tid',),),
      );
      return $field;
    }

    // FIELD INSTANCE DEFINITION
    elseif ($op == 'instance') {
      $instance = array(
        'label' => $t('Localities'),
        'widget' => array(
          'weight' => '5',
          'type' => 'options_buttons',
          'module' => 'options',
          'active' => 1,
          'settings' => array(),
        ),
        'display' => array(
          'default' => array(
            'label' => 'hidden',
            'type' => 'taxonomy_term_reference_link',
            'settings' => array(),
            'module' => 'taxonomy',
            'weight' => 5,
          ),
        ),
        'required' => 0,
        'description' => $t('Mark every <em>locality</em> to which this content specifically relates.'),
        'field_name' => 'field_localities',
      );
      return $instance;
    }

  }

  return FALSE;
}

/**
 * Hiding location on locality nodes
 */
function incubator_localities_update_7101() {
  _incubator_set_location('loc', array('multiple' => array('min' => 1, 'max' => 1, 'add' => 1), 'form' => array('weight' => -20), 'display' => array('full' => 0)));
  if ($instance = field_info_instance('node', 'field_localities', 'loc')) {     // intentional assignment of $instance
    $instance['display']['default']['type'] = 'hidden';
    field_update_instance($instance);
  }
  drupal_set_message(t('Incubator hid locations for locality content'));
}

/**
 * Enabling recent stories block for localities
 */
function incubator_localities_update_7102() {
  _incubator_enable_blocks(incubator_localities_incubator_default_blocks());
}

/**
 * Enabling local blocks for news, blogs, and events
 */
function incubator_localities_update_7103() {
  _incubator_enable_blocks(incubator_localities_incubator_default_blocks());
}

/**
 * Fixing unwarranted taxonomy terms on node create - http://drupal.org/node/1434466
 */
function incubator_localities_update_7104() {
  $field = field_info_field('field_localities');
  foreach ($field['bundles'] as $type => $type_def) {
    foreach ($field['bundles'][$type] as $bundle) {
      $instance = field_info_instance($type, 'field_localities', $bundle);
      unset($instance['default_value']);
      field_update_instance($instance);
    }
  }
  $query = db_query('SELECT t.* FROM {field_data_field_activity_type} t WHERE
    t.field_activity_type_tid = 1');
  foreach ($query as $result) {
    if ($result->entity_type == 'node') {
      $exclude_nids[] = $result->entity_id;
    }
  }
  if (is_array($exclude_nids)) {
    db_delete('taxonomy_index')->condition('nid', $exclude_nids, 'NOT IN')->condition('tid', 1)->execute();
  }
  else {
    db_delete('taxonomy_index')->condition('tid', 1)->execute();
  }
}

/**
 * Initialize the variable on whether to sort locality lists alphabetically
 */
function incubator_localities_update_7105() {
  if (db_query('select th.parent FROM {taxonomy_term_data} td 
                INNER JOIN {taxonomy_vocabulary} v ON v.vid = td.vid 
                LEFT JOIN {taxonomy_term_hierarchy} th ON th.tid = td.tid 
                WHERE v.machine_name = ? AND th.parent', array('localities'))
      ->fetchField()) {
    variable_set('incubator_localities_custom_sorted', TRUE);
  }
  else {
    variable_set('incubator_localities_custom_sorted', FALSE);
  }
}
