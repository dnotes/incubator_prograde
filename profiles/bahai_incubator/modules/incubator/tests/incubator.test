<?php
/**
* Tests the functionality of the Simpletest example content type.
*/
class IncubatorTestCase extends DrupalWebTestCase {
  protected $profile = 'bahai_incubator';
  protected $superadmin;
  protected $administrator;
  protected $photographer;
  protected $blogger;
  protected $reporter;
  protected $editor;
  protected $host;
  protected $content;

  public static function getInfo() {
    return array(
      'name' => 'Incubator Test Suite',
      'description' => 'Ensure that the incubator content types provided functions properly.',
      'group' => 'Incubator',
    );
  }
  
  public function setUp() {
    parent::setUp('bahai_incubator', 'incubator_announcements', 
            'incubator_blog', 'incubator_core_activities', 'incubator_events', 
            'incubator_facilities', 'incubator_gallery', 'incubator_localities', 
            'incubator_mapping', 'incubator_news', 'incubator_video');
    
    $roles_names = array('superadmin', 'administrator', 'photographer', 'blogger', 'reporter', 'host', 'editor');
    // setup test users w/permissions
    foreach ($roles_names as $role_name){
    //$role_name = 'host';
      $role = user_role_load_by_name($role_name);
      $this->$role_name = $this->drupalCreateUser(array());
      $roles = array($role->rid => $role->name);
      user_save($this->$role_name, array('roles' => $roles));
    }
    
  }

  public function testIncubatorProfile() {
    $modules = db_query('SELECT * FROM {system} WHERE name LIKE :name ORDER BY weight, name', array(':name' => 'incubator%%'))->fetchAll();
    $test_stages = array('creation', 'integration', 'removal');
    foreach ($test_stages as $stage) {
      foreach ($modules as $module) {
        $method = "{$module->name}_test_$stage";
        if (method_exists($this, $method)) {
          call_user_func(array($this, $method));
        }
      }
    }
  }

// TESTS FOR MODULES
/*
 * For each module, there are three possible testing phases:
 *
 * "creation" should be used to test all content creation tasks
 * "integration" should test relationships between modules
 * "removal" should test module removal logic
 *
 * To implement tests for any phase, create a private function with the name
 * [module_name]_test_[phase]().
 */

// Incubator (base module)

  private function incubator_test_creation() {

    //home page is set to /node/1

    //"Home" link appears in main menu

    //"Log in" link appears in user menu for anonymous

    //user menu has "Add content", "My account", and "Log out" for authenticated

    //the admin theme is set to seven

    //user must enter a real name when editing account
    //real names appear on content submissions

    //setting the site default location makes that show as default for nodes

    //editor can create, edit and delete basic pages

    //saving a page entitled "Bahá'í" results in a path of /content/bahai

    //editor has access to full html format

    //node forms appear with main column, right sidebar, and footer...
    //...at least after running cron

    //tags vocabulary appears on blog, news, event, gallery content

  }

  private function incubator_test_integration() {

    // TESTING INCUBATOR SETTINGS
    //setting the incubator image float direction...
    //...sets a class "incubator-images-[direction]" on the body...
    //...and all main images and gallery images float that way

    //setting image thumbnail (small) size...
    //...sets the size of images in lists...
    //...and of videos in lists

    //setting image medium size...
    //...sets the size of images on page views

    //setting image large size...
    //...sets the size of images in colorboxes...
    //...and of videos on page views

    //a report of content authorship appears at /admin/reports/incubator

    //taxonomy term edit forms show a message about adding new content

    //river of news appears on home page...
    //...showing blog, event, news, gallery

    //all roles can access filtered html format...
    //...and can upload media to those fields...
    //...tags like <table> and <script> are removed...
    //...media is displayed for full node view...
    //...but removed for teasers

    //editor can administer media at /admin/content/media

  }

// Incubator Announcements

// Incubator Blog

  private function incubator_blog_test_creation() {
    $this->drupalLogin($this->blogger);
    $this->assertTrue(user_access('create blog content'), 'Incubator Blogs module is enabled.');
    // create a blog as blogger
    $this->verbose('create a blog node');
    $blogFields = array();
    $blogFields['title'] = $this->randomName();
    $blogFields["locations[0][city]"] = $this->randomName();
    $blogFields["locations[0][province]"] = 'WA';
    $this->drupalPost('node/add/blog', $blogFields,  t('Save'));
    $this->assertText('Blog entry '. $blogFields['title'] .' has been created.');
    $this->assertText($blogFields['title']);
    //  anonymous can see blog on the blog page
    $this->drupalGet('blogs');
    $this->assertText($blogFields['title'], 'Anonymous can access blog on blogs page.');
    // anonymous can access blog
    $this->clickLink($blogFields['title']);
    // editor can create
    $this->drupalLogin($this->editor);
    $blog2Fields = array();
    $blog2Fields['title'] = $this->randomName();
    $blog2Fields["locations[0][city]"] = $this->randomName();
    $blog2Fields["locations[0][province]"] = 'WA';
    $this->drupalPost('node/add/blog', $blog2Fields,  t('Save'));
    $this->assertText('Blog entry '. $blog2Fields['title'] .' has been created.');
    $this->assertTitle($blog2Fields['title'] . ' | Drupal');
    // editor can edit
    $this->clickLink('Edit');
    // editor can delete blog
    $this->assertText('Delete');
  }

  private function incubator_blog_test_removal() {
    // disabling blog module after creation of blog content does not delete blog content or roles...
    // ...but disallows blogger posting blog content
    // re-enabling blog module restores blogger ability to post blog content
    // disabling blog module when no blog content exists deletes blog content type
    // disabling and uninstalling blog module deletes blogger role
  }

// Incubator Core Activities

  // This could be refactored to use already created content
  private function incubator_core_activities_test_integration() {
    // verify core activities module is enabled
    $m = module_list();
    $this->assertTrue(isset($m['incubator_core_activities']));
  
  // event - devotional gatherings
    $this->drupalLogin($this->host);
    $eventActivityFields = array();
    $eventActivityFields["title"] = $this->randomName();
    $eventActivityFields["field_event_info[und][0][value]"] = $this->randomName();
    $eventActivityFields["locations[0][city]"] = $this->randomName();
    $eventActivityFields["locations[0][province]"] = 'WA';  
    // flag activity type as devotional gathering
    $eventActivityFields["field_activity_type[und][1]"] = 1;
    $this->drupalPost('node/add/event', $eventActivityFields,  t('Save'));
    // verify the event was created successfully
    $this->assertText('Event ' . $eventActivityFields["title"] . ' has been created.', 'Event created and flagged as Devotional successfully.');
    // switch to anonymous user
    $this->drupalLogout();
    // check content of the devotional gatherings page
    $this->drupalGet('activities/devotional-gatherings');  
    
    $this->assertText("Community gatherings for prayer and worship take a wide variety of forms around the world and are generally open to all.", 
      'Explanation correct on activities/devotional-gatherings');
    // check the home page
    $this->drupalGet('home');  
    $this->assertText('Upcoming Events', 'Upcoming Events section visible on home page.');
    $this->assertText($eventActivityFields["title"], 'Upcoming Event visible on home page.');
    
  // blog - children's classes
    $this->drupalLogin($this->blogger);
    $blogActivityFields = array();
    $blogActivityFields['title'] = $this->randomName();
    $blogActivityFields["locations[0][city]"] = $this->randomName();
    $blogActivityFields["locations[0][province]"] = 'WA';
    //flag blog as related to Childeren's Classes
    $blogActivityFields["field_activity_type[und][2]"] = 1;
    $this->drupalPost('node/add/blog', $blogActivityFields,  t('Save'));
    // verify blog flagged correctly as Childrens Class
    $this->assertText('Blog entry ' . $blogActivityFields['title'] . ' has been created.');
    $this->assertText($blogActivityFields["locations[0][city]"]);
    $this->assertLink(t("Children's classes"));
    // verify anonymous access
    $this->drupalLogout();
    
    $this->drupalGet('activities/childrens-classes');
    // These tests error out apparently due to the single quote.
    //$this->assertText('Children\'s classes');
    //$this->assertText('Classes for children, open to all, teach spiritual attitudes and behavior based on Bahá\'í principles.');
    $this->assertText($blogActivityFields['title']);
    // check the blogs page
    $this->drupalGet('blogs');  
    $this->assertText('Recent Blog Entries');
    $this->clickLink(t($blogActivityFields['title']));
    
  //  news - jr youth group
    $this->drupalLogin($this->reporter);
    $newsActivityFields = array();
    $newsActivityFields['title'] = $this->randomName();
    $newsActivityFields["locations[0][city]"] = $this->randomName();
    $newsActivityFields["locations[0][province]"] = 'WA';  
    // flag blog as JYG
    $newsActivityFields['field_activity_type[und][3]'] = 1;
    $this->drupalPost('node/add/news', $newsActivityFields,  t('Save'));
    
    $this->assertText('News item ' . $newsActivityFields['title'] . ' has been created.');
    $this->assertText($newsActivityFields["locations[0][city]"]);
    $this->assertText('Activity type:');
    $this->assertText('Junior youth groups');

// gallery - study circle 
// TODO:fix gallery node form compatibility with activites
  //    $this->drupalLogin($this->photographer);
  //    $galleryActivityFields = array();
  //    $galleryActivityFields['title'] = $this->randomName();
  //    $galleryActivityFields["locations[0][city]"] = $this->randomName();
  //    $galleryActivityFields["locations[0][province]"] = 'WA';
  //    // flag gallery as study circle
  //    $newsActivityFields['field_activity_type[und][4]'] = 1;

    // TODO: fix the following test to ensure that the terms returned are the correct ones
    // incubator_core_activities_terms() returns
    // array(dg=>[devotional gatherings], cc=>[children's classes], jyg=>[junior youth groups], sc=>[study circles])
    $activitiesArray = incubator_core_activities_terms();
    $hasElements = isset($activitiesArray['dg']) and isset($activitiesArray['cc']) and isset($activitiesArray['jyg']) and isset($activitiesArray['sc']);
    $this->assertTrue($hasElements, 'Function incubator_core_activities_terms() returns all elements');
    
    
  }

  private function incubator_core_activities_test_removal() {
    // After disabling core activities module...
    // ...the vocabulary no longer appears on node view or edit...
    // ...but the term pages still appear
    // After re-enabling core activities module...
    // ...vocabulary appears again and data remains
    // After disabling and uninstalling core activities module...
    // ...the vocabulary, terms, and node associations are all deleted
  }

// Incubator Events

  private function incubator_events_test_creation() {
    $m = module_list();
    $this->assertTrue(isset($m['incubator_events']));
    // Calendar page is visible on install
    // upcoming events list is visible on install from a link on calendar page

    // host able to create an event
    $this->drupalLogin($this->host);
    $eventFields = array();
    $eventFields['title'] = $this->randomName();
    $eventFields["field_event_info[und][0][value]"] = $this->randomName();
    $eventFields["locations[0][city]"] = $this->randomName();
    $eventFields["locations[0][province]"] = 'WA';
    $this->drupalPost('node/add/event', $eventFields,  t('Save'));
    $this->assertText('Event ' . $eventFields['title'] . ' has been created.');
    // verify Calendar page is working for anonymous user
    // switch to anonymous user
    $this->drupalLogout();
    // anonymous user can view event
    $this->drupalGet("events/calendar");
    $this->assertText($eventFields['title']);
    $this->drupalGet("events/upcoming");
    $this->assertText($eventFields['title']);
    // editor can create event
    $this->drupalLogin($this->editor);
    $event2Fields = array();
    $event2Fields['title'] = $this->randomName();
    $event2Fields["field_event_info[und][0][value]"] = $this->randomName();
    $event2Fields["locations[0][city]"] = $this->randomName();
    $event2Fields["locations[0][province]"] = 'WA';
    $this->drupalPost('node/add/event', $event2Fields,  t('Save'));
    $this->assertText('Event ' . $event2Fields['title'] . ' has been created.',
      'Editor is able to create an event.');
    // editor can edit event
    $this->clickLink('Edit');     
    // editor can delete event
    $this->assertText('Delete');    
  }

  private function incubator_events_test_integration() {
    // anonymous verify calendar works (no error msgs & contains event)
    // anonymous verify upcoming events list works...
    // ...sorted by closest upcoming date, with repeating events displayed per occurrence

    // anonymous verify activities view works, sorted by day of week, with repeating events aggregated into one listing
    // anonymous verify activities views work per activity group, e.g. activities for kids.
    // anonymous can see events on the home page

    // setting primary view to “event list” results in upcoming events tab being displayed...
    // ...in the same place as calendar tab was (change weight in main menu first)
    // setting “completely disable the non-primary view” results in no link on the events page...
    // ...and a 301 redirect to the correct page if the wrong one is typed in
    // setting primary view to “both” results in both tabs being displayed
    // setting title fields alters page and tab titles
    // setting first day of week and number of weeks in months has the expected results

    // events with no core activities are displayed as pins on map

    // icons display correctly for all four core activities
    // events block at /activities/[title] shows only events for that core activity

    // localities view at /events/calendar - links point to /events/calendar/[tid]
    // events block at /local/[title] shows only events for that locality

    // feed at /events/upcoming/rss.xml is a properly formatted rss feed sorted by post time
    // feed at /events/upcoming/rss.xml/[tid] is filtered by taxonomy term

  }

  private function incubator_events_test_removal() {
    // disabling events module after creation of event content does not delete event content or roles...
    // ...but disallows host posting event content
    // re-enabling events module restores host ability to post event content
    // disabling events module when no event content exists deletes event content type
    // disabling and uninstalling event module deletes host role
  }

// Incubator Facilities

  private function incubator_facilities_test_creation() {
    // editor can create facility content
    // editor can edit facility content
    // editor can delete facility content

  }

  private function incubator_facilities_test_integration() {
    // facilities appear in location chooser form for events, blogs, news, galleries
    // view on facility page shows events in that facility (from location chooser)
    // feed at calendar/facility/[nid]/rss.xml is properly formatted rss feed

    // facilities appear on map

  }

  private function incubator_facilities_test_removal() {
    // disabling module does not delete existing facility nodes
    // disabling module when no facilities exist deletes facility content type

  }

// Incubator Gallery

  private function incubator_gallery_test_creation() {
    //photographer can create gallery

    //editor can create, edit and delete galleries

    //anonymous can access galleries

    //anonymous can see galleries on the home page
    // teasers display one square image 81x81 (gallery_thumb style)...
    // ...followed by up to 8 25x81 images (gallery_teaser_thumb style)

    // page display is a slideshow...
    // ...with large image at 600x500 with a black background (gallery_slide style)...
    // ...and thumbnails at square 81x81 size (gallery_thumb style)
    // clicking on a thumbnail causes that image to be displayed
    // clicking on the current image advances to the next
    // clicking on next and previous arrows has the desired effect
  }

  private function incubator_gallery_test_removal() {
    // disabling gallery module after creation of gallery content does not delete galleries or roles...
    // ...but disallows photographer posting gallery content
    // re-enabling gallery module restores photographer ability to post gallery content
    // disabling gallery module when no gallery content exists deletes gallery content type
    // disabling and uninstalling gallery module deletes photographer role
  }

// Incubator Localities

  private function incubator_localities_test_creation() {

    // when creating news content before any loc content exists...
    // ...when no core activities are selected...
    // ...no taxonomy terms are applied to the new news node

    $m = module_list();
    $this->assertTrue(isset($m['incubator_localities']), 'Incubator Localities Module is enabled.');

    // editor can create, edit, and delete loc content

    // field_localities does not show up on node view

    // field_localities appears on edit form for blog, news, event, gallery, facility

    $this->drupalLogin($this->superadmin);

    //creating a loc node creates a term in localities vocabulary
    $locFields = array();
    $locFields['title'] = 'Bahai National Center';
    $locFields['locations[0][name]'] = 'BNC';
    $locFields['locations[0][street]'] = '1233 Central Street';
    $locFields['locations[0][city]'] = 'Evanston';
    $locFields['locations[0][province]'] = 'IL';
    $this->drupalPost('node/add/loc', $locFields,  t('Save'));
    $this->assertText('Locality Bahai National Center has been created.', 'SuperAdmin able to create a locality');
    // check News block is working
    $this->assertText('News by local area', 'News by locality block is displaying');

    // when creating a loc node...
    // ...the localities taxonomy only shows terms without an associated node...
    //    $this->drupalPost('node/add/loc', $locFields,  t('Save'));
    //    $this->drupalGet('node/add/loc');
    // ...and the selected term is to create a new term
    //    $this->assertText('new locality');

    // all taxonomy links (such as on node view) point to loc nodes instead

    // anonymous can see localities at /local
    //    $this->drupalLogout();
    //    $this->drupalGet('local');
    //    $this->assertText($locFields['title']);

    // anonymous can see news for each locality at /local/[title]
    //    $this->drupalLogin($this->superadmin);
    //    $locNewsFields = array();
    //    $locNewsFields['title'] = $this->randomName();
    //    $tid = db_query("SELECT tid FROM {taxonomy_term_data} WHERE name = :name",
    //      array(':name' => 'The BNC'))->fetchField();
    //    $locNewsFields["field_localities[und][$tid]"] = TRUE;
    //    $locNewsFields['location_chooser'] = $tid;
    //    $locNewsFields['locations[0][street]'] = '1233 Central Street';
    //    $locNewsFields['locations[0][city]'] = 'Evanston';
    //    $this->drupalPost('node/add/news', $locNewsFields,  t('Save'));
    //    $this->drupalLogout();
    //    $this->drupalGet('/local/' . $locNewsFields['title']);
    //    $this->clickLink('The BNC');
    //    $this->assertText($locNewsFields['title'],'Anonymous can see news for each locality at /local/[title].');

  }

  private function incubator_localities_test_integration() {
    // editing the title of a loc node edits the associated term title
    //    $nid = db_query("SELECT nid FROM {node} WHERE title = :title",
    //      array(':title' => 'Bahai National Center'))->fetchField();
    //    $locFields['title'] = 'The BNC';
    //    $this->drupalPost("node/$nid/edit", $locFields,  t('Save'));
    //    $this->assertText('Locality The BNC has been updated.', 'Able to edit Locality Title');

    // deleting a loc node deletes the associated term
    //    $this->clickLink('Edit');
    //    $this->clickLink('Delete');
    //    $this->drupalPost("node/$nid/edit", array(),t('Delete'));
    //    $this->assertText('Locality The BNC has been deleted.');
    //    $this->drupalGet('news');
    //    $this->assertNoText('The BNC', 'Deleted loc node has removed associated term.');

    // on the edit form for loc nodes, the localities taxonomy selection is radios

    // when editing a loc node, the localities taxonomy is disabled

    // localities block is visible at /news...

    // ...and the links point to loc node pages

    // localities block is visible at /events/upcoming...

    // ...filters event list by local area...

    // ...and the currently selected area is not a link

    // localities block is visible at /events/calendar

    // ...filters calendar by local area...

    // ...and the currently selected area is not a link

    // taxonomy can be sorted at /admin/structure/taxonomy/localities...

    // ...and a two-level tree will be parsed on the /local page...

    // ...and top level locality will show news for all localities below

    // when mapping is enabled, a map of localities appears at /local

  }

  private function incubator_localities_test_removal() {
    // disabling loc module when no loc content exists deletes loc content type
    // disabling localities module after creation of loc content does not delete loc content...
    // ...but removes localities field from all content types...
    // ...without deleting field data
    // re-enabling localities module restores taxonomy field and data
    // disabling and uninstalling loc module deletes field, data, and vocabulary
  }

// Incubator Location

// Incubator Mapping

  private function incubator_mapping_test_integration() {
    // Map area defaults to the United States

    // Map area can be set at /admin/config/incubaor/mapping...

    // ...and then map area uses those settings

    // anonymous can see map at /map

    // anonymous can see map above localities on /local view

    // authenticated can set user location...

    // and that location then appears in location chooser on node creation
  }

// Incubator News

  private function incubator_news_test_creation() {
    // verify news module is enabled
    $m = module_list();
    $this->assertTrue(isset($m['incubator_news']), 'Incubator News module is enabled.');
    //reporter can create and edit news
    $this->drupalLogin($this->reporter);
    $newsFields = array();
    $newsFields['title'] = $this->randomName();
    $newsFields["locations[0][city]"] = $this->randomName();
    $newsFields["locations[0][province]"] = 'WA';
    $this->drupalPost('node/add/news', $newsFields, t('Save'));
    //reporter can edit 
    $this->clickLink('Edit');  
    //reporter can delete news
    $this->assertText('Delete', 'Reporter can delete news.');
    //anonymous can see news on the news page    
    $this->drupalLogin($this->reporter);
    $news2Fields = array();
    $news2Fields['title'] = $this->randomName();
    $news2Fields["locations[0][city]"] = $this->randomName();
    $news2Fields["locations[0][province]"] = 'WA';
    $this->drupalPost('node/add/news', $news2Fields, t('Save'));
    $this->drupalLogout();
    //anonymous can access news
    $this->drupalGet('news');
    $this->clickLink($news2Fields['title']);
    //TODO:anonymous can see news items on the home page
    //    $this->drupalGet('home');
    //    $this->assertText($news2Fields['title'], 'Anonymous user can see events.');
    //    //local news block works if enabled
    //    $this->assertText('Upcoming Events', 'Events Block is showing correctly.');
    //TODO:news feed at /news/rss.xml returns valid rss
  }

  private function incubator_news_test_removal() {

    // changing news page title at /admin/config/incubator/news immediately...

    // ...changes tab title of news page menu link, and...

    // ...chnages page title of news page

    // disabling news module after creation of news content does not delete news content or roles...
    // ...but disallows reporter posting news content
    // re-enabling news module restores reporter ability to post news content
    // disabling news module when no news content exists deletes news content type
    // disabling and uninstalling news module deletes reporter role
  }

// Incubator Video

  private function incubator_video_test_creation() {
    //videographer can create videos

    //editor can create, edit and delete videos

    //anonymous can access videos

    //anonymous can see videos on the home page

    // teasers display video at 212x159 pixels

    // page display is 600x450px

  }

  private function incubator_video_test_removal() {
    // disabling video module after creation of video content does not delete videos or roles...
    // ...but disallows videographer posting video content
    // re-enabling gallery module restores videogrpaher ability to post video content
    // disabling video module when no video content exists deletes video content type
    // disabling and uninstalling video module deletes videographer role
  }

}
