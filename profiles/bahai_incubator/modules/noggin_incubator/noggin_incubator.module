<?php
// $Id$

/**
 * @file
 *
 */

function noggin_incubator_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'system_theme_settings' && isset($form['var']['#value'])) {
    if ($form['var']['#value'] != 'theme_settings') {
      drupal_add_css(drupal_get_path('module', 'noggin_incubator') . '/noggin_incubator_form.css');
      $theme_settings = variable_get($form['var']['#value'], array());
      $form['#submit'][] = 'noggin_incubator_theme_settings_submit';
      $form['#validate'][] = 'noggin_incubator_theme_settings_validate';
      $form['incubator_header_changed'] = array(
        '#type' => 'value', '#value' => FALSE,
      );
      $form['noggin']['settings']['css_settings']['adaptive'] = array(
        '#type' => 'fieldset',
        '#title' => t('Adaptive image sizes'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
      );
      $adaptive_sizes = array(
        'wide' => array('width' => '1228', 'height' => '240'),
        'normal' => array('width' => '988', 'height' => '190'),
        'narrow' => array('width' => '748', 'height' => '150'),
        'mobile' => array('width' => '720', 'height' => '100'),
      );

      foreach (array('wide', 'normal', 'narrow', 'mobile') as $size) {
        $form['noggin']['settings']['css_settings']['adaptive'][$size] = array(
          '#type' => 'fieldset',
          '#title' => t($size),
          '#collapsible' => FALSE,
          '#collapsed' => FALSE,
        );
        $form['noggin']['settings']['css_settings']['adaptive'][$size]["header_image_width_$size"] = array(
          '#type' => 'textfield',
          '#title' => t('Width'),
          '#default_value' => isset($theme_settings["header_image_width_$size"]) ? $theme_settings["header_image_width_$size"] : $adaptive_sizes[$size]['width'],
          '#size' => 5,
          '#description' => 'px',
        );
        $form['noggin']['settings']['css_settings']['adaptive'][$size]["header_image_height_$size"] = array(
          '#type' => 'textfield',
          '#title' => t('Height'),
          '#default_value' => isset($theme_settings["header_image_height_$size"]) ? $theme_settings["header_image_height_$size"] : $adaptive_sizes[$size]['height'],
          '#size' => 5,
          '#description' => 'px',
        );
      }
      switch ($form['var']['#value']) {
        case 'theme_incubator_standard_theme_settings':
          $form['noggin']['settings']['css_settings']['header_selector']['#default_value'] = isset($theme_settings['header_selector']) ? $theme_settings['header_selector'] : '#header-banner-image';
          $form['noggin']['settings']['css_settings']['header_vertical_alignment']['#description'] = t('NOTE: changing this setting on an Incubator site will require additional custom css.');
          break;
      }
    }
  }
}

function noggin_incubator_theme_settings_validate($form, &$form_state) {
  if (is_object($form_state['values']['header_upload'])) {
    $form_state['values']['incubator_header_upload'] = $form_state['values']['header_upload'];
    $form_state['values']['header_upload'] = $form_state['input']['header_path'] = NULL;
    $form_state['values']['header_path'] = 'public://header/raw/' . $form_state['values']['incubator_header_upload']->filename;
    $form_state['values']['incubator_header_changed'] = 'all';
  }
  if ($form_state['values']['header_image'] != $form['noggin']['header_image']['#default_value'] ||
      $form_state['values']['header_path'] != $form['noggin']['settings']['path_settings']['header_path']['#default_value']) {
    $form_state['values']['incubator_header_changed'] = 'all';
  }
  if ($form_state['values']['incubator_header_changed'] != 'all') {
    foreach(array('wide', 'normal', 'narrow', 'mobile') as $size) {
      if ($form_state['values']["header_image_width_$size"] != theme_get_setting("header_image_width_$size", $form_state['values']['theme']) ||
          $form_state['values']["header_image_height_$size"] != theme_get_setting("header_image_height_$size", $form_state['values']['theme'])) {
        $changed[] = "$size";
      }
      if (!empty($changed)) {
        $form_state['values']['incubator_header_changed'] = implode('|', $changed);
      }
    }
  }
  if ($path = _system_theme_settings_validate_path($form_state['values']['header_path'])) {
    $form_state['values']['header_path'] = $path;
  }
}

function noggin_incubator_theme_settings_submit($form, &$form_state) {
  if (!empty($form_state['values']['incubator_header_changed'])) {
    $values = $form_state['values'];

    // Save any uploaded file
    if (!empty($form_state['values']['incubator_header_upload'])) {
      $directory = 'public://header/raw';
      file_prepare_directory($directory, FILE_CREATE_DIRECTORY);
      $filename = file_unmanaged_copy($values['incubator_header_upload']->uri, "$directory/{$values['incubator_header_upload']->filename}", FILE_EXISTS_REPLACE);
      unset($form_state['values']['incubator_header_upload']);
    }

    // Load the proper image
    switch ($values['header_image']) {
      case NULL:
      case FALSE:
        return;

      case 'custom':
        $path = $values['header_path'];
        break;

      default:
        list($key, $file) = explode(':', $values['header_image']);
        switch ($key) {
          case 'noggin':
            $path = drupal_get_path('module', 'noggin') . '/headers';
            break;
          default:
            $path = drupal_get_path('theme', $key) . '/header-images';
            break;
        }
        $path .= "/$file";
        break;
    }

    // Copy four sizes to public://header/header-[size].png
    if (!empty($path)) {
      $image_path = drupal_realpath($path);
      if ($image = image_load($image_path)) { // intentional assignment of $image
        $sizes = $values['incubator_header_changed'] = 'all' ? array('wide', 'normal', 'narrow', 'mobile') : explode('|', $values['incubator_header_changed']);
        module_load_include('inc', 'image', 'image.effects');
        $ext = preg_replace('/^[^\.]+\./', '', $path);
        foreach ($sizes as $size) {
          $dimensions = array(
            'width' => $values["header_image_width_$size"],
            'upscale' => TRUE,
          );
          image_scale_effect($image, $dimensions);
          if ($image->info['height'] < $values["header_image_height_$size"]) {
            $dimensions = array(
              'height' => $values["header_image_height_$size"],
              'upscale' => TRUE,
            );
            image_scale_effect($image, $dimensions);
          }
          $uri = "public://header/header-$size.$ext";
          image_save($image, $uri);
          drupal_chmod($uri);
          $style = "body {$values['header_selector']} { background-image:url(header-$size.$ext) !important; } \n";
          $cssfile = "public://header/incubator-header-{$values['theme']}-{$size}.css";
          $filepath = file_unmanaged_save_data($style, $cssfile, FILE_EXISTS_REPLACE);
          drupal_chmod($cssfile);
        }
      }
    }
  }
  unset($form_state['values']['incubator_header_changed']);
}

function noggin_incubator_get_media_query($size) {
  global $theme_key;
  if ($mq = theme_get_setting("alpha_layouts_alpha_default_{$size}_media", $theme_key)) {
    return $mq;
  }
  elseif ($size == 'mobile' && theme_get_setting('alpha_responsive', $theme_key)) {
    return 'all';
  }
}

function noggin_incubator_preprocess_page(&$vars) {
  global $theme_key;
  $settings = variable_get("theme_{$theme_key}_settings", array());
  if (!empty($settings['header_image'])) {
    foreach (array('mobile', 'narrow', 'normal', 'wide') as $size) {
      $file = "public://header/incubator-header-{$theme_key}-{$size}.css";
      if (file_exists(drupal_realpath($file)) && $media_query = noggin_incubator_get_media_query($size)) {
        drupal_add_css($file, array(
          'group' => CSS_THEME,
          'every_page' => TRUE,
          'media' => $media_query,
        ));
      }
    }
  }
}
