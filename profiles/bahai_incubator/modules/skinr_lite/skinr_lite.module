<?php
// $Id$

/**
 * @file
 *
 */

/**
 * Gets all skin info definitions that are enabled for a particular theme.
 * 
 * @param string $theme_key
 * The machine name of the theme being queried.
 * 
 * @return array 
 * An array of skin info definitions that apply to the current theme, keyed by
 * machine name of the skin.
 */
function skinr_lite_get_skin_info($theme_key = NULL) {
  $skins = array();
  if (is_null($theme_key)) {
    global $theme_key;
  }
  
  $info = drupal_parse_info_file(drupal_get_path('theme', $theme_key) . "/$theme_key.info");
  if (!empty($info['skinr']) && is_array($info['skinr']) && $info['skinr']['api'] == 2) {
    $path = drupal_get_path('theme', $theme_key);
    $file = "$path/$theme_key.skinr.inc";
    @include_once $file;
    if (function_exists($function = $theme_key . '_skinr_skin_info')) {
      module_load_include('inc', 'skinr_lite');
      $skins = $function();
      $source = array(
        'api' => 2,
        'type' => 'theme',
        'name' => $theme_key,
        'directory' => !empty($info['skinr']['directory']) ? $info['skinr']['directory'] : 'skins',
        'path' => $path,
        'include file' => $path . "/$theme_key.skinr.inc",
        'base themes' => !empty($info['base theme']) ? array($info['base theme']) : array(),
      );
      _skinr_lite_skin_info_process($skins, $source);
    }
  }

  if ($path = drupal_get_path('module', 'skinr')) {
    include_once $path . '/skinr.module';
    cache_clear_all('skinr_skin_info', 'cache');
    cache_clear_all('skinr_implements_api', 'cache');
    $skins = array_merge($skins, skinr_get_skin_info());
  }

  if (!empty($skins) && is_array($skins)) {
    foreach ($skins as $name => $skin_info) {
      if (!$skin_info['status'][$theme_key] ||
        !in_array($skin_info['type'], array('checkboxes', 'select', 'radios')) ||
        ($skin_info['theme hooks'] != array('*') && !in_array('html', $skin_info['theme hooks']))
      ) {
        unset($skins[$name]);
      }
    }
  }
  // Set skinr_lite_THEME_skins cache.
  variable_set("skinr_lite_theme_{$theme_key}_skins", $skins);
  if (!empty($skins)) {
    return $skins;
  }
  return FALSE;
}

/**
 * Implements hook_preprocess_html().
 * 
 * Skinr Lite uses this hook to add classes to the html element based on the
 * options that have been enabled on the theme settings page.
 * 
 * @param array $vars
 */
function skinr_lite_preprocess_html(&$vars) {
  global $theme_key;
  
  // Get theme settings.
  $theme_settings = variable_get("theme_{$theme_key}_settings", array());
  
  // Get available skins.
  $skins = variable_get("skinr_lite_theme_{$theme_key}_skins", array());
  
  if (!empty($skins) && !empty($theme_settings['skins'])) {
    foreach ($theme_settings['skins'] as $name => $values) {
      
      // Filter theme settings to selected values
      if (!is_array($values)) {
        $values = array($values);
      }
      $values = array_filter($values);
      
      foreach ($values as $value) {
        
        // Apply classes based on theme settings.
        if (!empty($skins[$name]['options'][$value]['class']) && is_array($skins[$name]['options'][$value]['class'])) {
          $vars['classes_array'] = array_merge($vars['classes_array'], $skins[$name]['options'][$value]['class']);
        }

        // Include css and js files from cached available skins.
        skinr_lite_attach_files($vars, $skins[$name], $value);

      }
    }
    if (!empty($vars['#attached'])) {
      drupal_process_attached($vars, JS_DEFAULT, FALSE, TRUE);
    }
  }
  
}

/**
 * Implements hook_form_FORM_ID_alter() for system_theme_settings form.
 * 
 * Skinr Lite uses this hook to render available skins as theme options.
 * 
 * @param type $form
 * @param type $form_state
 */
function skinr_lite_form_system_theme_settings_alter(&$form, &$form_state) {
  
  // Display the form on theme-specific settings page only.
  if (isset($form['var']['#value']) && $form['var']['#value'] != 'theme_settings') {
    $matches = array();
    if ($count = preg_match('|^theme_(.+)_settings$|', $form['var']['#value'], $matches)) {
      $theme_key = $matches[1];
      module_load_include('inc', 'skinr_lite');
      
      // Clear the cache in case we are using Skinr module.
      cache_clear_all('skinr_skin_info', 'cache');
      
      // Get all available skins.
      if ($skins = skinr_lite_get_skin_info($theme_key)) {
        
        $formelement = array('#title' => t('Skin options'), '#tree' => TRUE);
        $theme_settings = variable_get($form['var']['#value'], array());

        // Render each available skin as a theme setting.
        foreach ($skins as $name => $skin_info) {
          if ($field = skinr_lite_form_element($skin_info, $theme_settings)) {
            $formelement[$name] = $field;
            $settings[$name] = $skin_info;
          }
        }
        
        if (module_exists('color') && !empty($form['color'])) {
          $form['color']['skins'] = $formelement;
          drupal_add_css(drupal_get_path('module', 'skinr_lite') . '/skinr_lite_preview.css');
          drupal_add_js(drupal_get_path('module', 'skinr_lite') . '/skinr_lite_preview.js');
          drupal_add_js(array('skinrLite' => $settings), 'setting');
        }
        else {
          $form['skins'] = $formelement;
        }

      }
    }
  }
  
}

function skinr_lite_attach_files(&$element, $skin_info, $value = FALSE) {
  if (empty($element['#attached']) || !is_array($element['#attached'])) {
    $element['#attached'] = array();
  }
  if (!empty($skin_info['attached']) && is_array($skin_info['attached'])) {
    $element['#attached'] = array_merge_recursive($element['#attached'], $skin_info['attached']);
  }
  if ($value === FALSE) {
    if (!empty($skin_info['options'])) {
      foreach ($skin_info['options'] as $option) {
        if (!empty($option['attached'])) {
          $element['#attached'] = array_merge_recursive($element['#attached'], $option['attached']);
        }
      }
    }
  }
  else {
    if (!empty($skin_info['options'][$value]['attached'])) {
      $element['#attached'] = array_merge_recursive($element['#attached'], $skin_info['options'][$value]['attached']);
    }
  }
}

function skinr_lite_set_theme_skin_options($theme_key, $skin_settings = array(), $scheme = NULL) {
  
  // Set color scheme if possible
  if (!empty($scheme) && module_exists('color')) {
    $info = color_get_info($theme_key);
    $form = $form_state = array();
    $form_state['values']['theme'] = $theme_key;
    $form_state['values']['info'] = $info;
    if (is_string($scheme) && !empty($info['schemes'][$scheme])) {
      $form_state['values']['scheme'] = $scheme;
      $form_state['values']['palette'] = $info['schemes']['default']['colors'];
      color_scheme_form_submit($form, $form_state);
      drupal_flush_all_caches();
    }
    elseif (is_array($scheme)) {
      $form_state['values']['scheme'] = '';
      $form_state['values']['palette'] = array_merge(
        $info['schemes']['default']['colors'],
        array_intersect_key(
          $scheme,
          $info['schemes']['default']['colors']
        )
      );
      color_scheme_form_submit($form, $form_state);
      drupal_flush_all_caches();
    }
  }

  // Set skin options if possible
  if (!empty($skin_settings) && $skins = skinr_lite_get_skin_info($theme_key)) {
    
    if (!$theme_info = variable_get("theme_{$theme_key}_settings", FALSE)) {
      $theme_info = array('skins' => array());
    }
    
    foreach ($skin_settings as $name => $setting) {
      if (!empty($skins[$name]['options'])) {
        $real_options = array_keys($skins[$name]['options']);
        $is_multiple = $skins[$name]['type'] == 'checkboxes';
        
        // Empty indicates to reset to default
        if (empty($setting)) {
          if (!empty($theme_info['skins'][$name])) {
            $theme_info['skins'][$name] = 
              $is_multiple ? array_fill_keys($real_options, 0) : '';
          }
        }
        
        // Multiple options
        elseif ($is_multiple) {
          $setting = is_array($setting) ? $setting : array($setting);
          foreach($real_options as $real_option_name) {
            $theme_info['skins'][$name][$real_option_name] = 
              in_array($real_option_name, $setting) ? $real_option_name : 0;
          }
        }
        
        // Singular options
        else {
          if (in_array($setting, $real_options)) {
            $theme_info['skins'][$name] = $setting;
          }
        }
        
      }
    }
    
    if (!empty($theme_info['skins'])) {
      variable_set("theme_{$theme_key}_settings", $theme_info);
    }
  }
  
}
